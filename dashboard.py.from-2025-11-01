import os, json, subprocess, time
from datetime import datetime
import pandas as pd
import streamlit as st

# â”€â”€ Config
SERVICE = os.getenv("NATACHA_SERVICE", "natacha-health-monitor")
REGION  = os.getenv("NATACHA_REGION",  "us-central1")
PROJECT = os.getenv("GCP_PROJECT",     "asistente-sebastian")
AR_PATH = os.getenv("AR_DOCKER_PATH",  "")  # ej: "us-central1-docker.pkg.dev/asistente-sebastian/natacha"
CHECK   = os.getenv("NATACHA_UPTIME_CHECK",
                    f"projects/{PROJECT}/uptimeCheckConfigs/healthmonitor-mertgzh6hJg")
P_UP1   = os.getenv("NATACHA_POLICY_UP",
                    f"projects/{PROJECT}/alertPolicies/5980311962589578804")
P_UP2   = os.getenv("NATACHA_POLICY_ALL",
                    f"projects/{PROJECT}/alertPolicies/13575294913821338865")

def badge(status:str, text:str=""):
    color = {"green":"âœ…","yellow":"ðŸŸ¡","red":"ðŸ›‘","grey":"âšª"}.get(status,"âšª")
    return f"{color} {text or status.upper()}"

def run(cmd:str, timeout=40):
    try:
        out = subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT, timeout=timeout, text=True)
        return out.strip(), None
    except subprocess.CalledProcessError as e:
        return e.output.strip(), e
    except Exception as e:
        return str(e), e

def safe_json(out:str):
    try:
        return json.loads(out) if out else None
    except Exception:
        return None

st.set_page_config(page_title="Natacha Ops", layout="wide")
st.title("Natacha Ops â€” Dashboard Ãºnico")

section = st.sidebar.radio(
    "Secciones",
    ["General", "Infraestructura", "Contenedores", "Uptime & Alertas", "Cerebro", "APIs/Config", "AuditorÃ­as"]
)
st.sidebar.caption(f"Proyecto: **{PROJECT}** | RegiÃ³n: **{REGION}** | Servicio: **{SERVICE}**")

# â”€â”€ General
if section == "General":
    col1, col2, col3 = st.columns(3)

    out, _ = run(f"gcloud run services describe {SERVICE} --region {REGION} --format=json")
    svc = safe_json(out) or {}
    status = svc.get("status", {})
    url = status.get("url", "")
    ready = status.get("conditions", [{}])[-1].get("status", "False") == "True"
    col1.metric("Cloud Run", "READY" if ready else "NOT READY")
    col1.write(badge("green" if ready else "red", url or SERVICE))

    out, _ = run(f"gcloud run revisions list --service {SERVICE} --region {REGION} --format=json")
    revs = safe_json(out) or []
    df_revs = pd.DataFrame([{
        "revision": r.get("metadata",{}).get("name",""),
        "traffic%": next((t.get("percent") for t in (r.get("status",{}).get("traffic",[]) or []) if t.get("latestRevision",False)), None),
        "created": r.get("metadata",{}).get("creationTimestamp","")
    } for r in revs])
    with col2:
        st.metric("Revisiones", len(df_revs))
        st.dataframe(df_revs, width='stretch')

    q = (
      'resource.type="cloud_run_revision" '
      f'AND resource.labels.service_name="{SERVICE}" '
      'AND logName:"run.googleapis.com%2Frequests"'
    )
    out, _ = run(f"gcloud logging read '{q}' --freshness=10m --limit=20 --format=json")
    logs = safe_json(out) or []
    errors = [l for l in logs if str(l.get("httpRequest",{}).get("status","")).startswith(("5","4"))]
    col3.metric("Requests (10m)", len(logs), delta=f"{len(errors)} errores")
    st.caption("Ãšltimos requests")
    df_logs = pd.DataFrame([{
        "ts": l.get("timestamp",""),
        "status": l.get("httpRequest",{}).get("status",""),
        "url": l.get("httpRequest",{}).get("requestUrl","")
    } for l in logs])
    st.dataframe(df_logs, width='stretch')

# â”€â”€ Infraestructura
elif section == "Infraestructura":
    st.subheader("Compute Engine (VMs)")
    out, _ = run(f"gcloud compute instances list --project {PROJECT} --format=json")
    vms = safe_json(out) or []
    if vms:
        data = []
        for vm in vms:
            data.append({
                "name": vm.get("name",""),
                "zone": vm.get("zone","").split("/")[-1],
                "status": vm.get("status",""),
                "ip": vm.get("networkInterfaces",[{}])[0].get("networkIP","")
            })
        st.dataframe(pd.DataFrame(data), width='stretch')
    else:
        st.info("No se encontraron VMs o permisos insuficientes.")

    st.subheader("MÃ©tricas de servicio (semÃ¡foro)")
    out, _ = run("gcloud alpha monitoring alerts list --format=json")
    alerts = safe_json(out) or []
    open_alerts = [a for a in alerts if a.get("state")=="OPEN"]
    p95_open = any("latency" in (a.get("policy_name","")+a.get("condition_name","")).lower() for a in open_alerts)
    e5xx_open= any("5xx"    in (a.get("policy_name","")+a.get("condition_name","")).lower() for a in open_alerts)
    st.write("Latencia P95:", badge("yellow" if p95_open else "green", "degradada" if p95_open else "OK"))
    st.write("Errores 5xx:", badge("red" if e5xx_open else "green", "falla" if e5xx_open else "OK"))

# â”€â”€ Contenedores
elif section == "Contenedores":
    st.subheader("Revisiones de Cloud Run")
    out, _ = run(f"gcloud run revisions list --service {SERVICE} --region {REGION} --format=json")
    revs = safe_json(out) or []
    st.dataframe(pd.DataFrame([{
        "revision": r.get("metadata",{}).get("name",""),
        "create": r.get("metadata",{}).get("creationTimestamp",""),
        "image": (r.get("spec",{}).get("containers",[{}])[0].get("image","")),
        "traffic%": next((t.get("percent") for t in (r.get("status",{}).get("traffic",[]) or []) if t.get("latestRevision",False)), None)
    } for r in revs]), width='stretch')

    st.subheader("Artifact Registry (imÃ¡genes)")
    if AR_PATH:
        out, _ = run(f"gcloud artifacts docker images list {AR_PATH} --include-tags --format=json")
        imgs = safe_json(out) or []
        if imgs:
            st.dataframe(pd.DataFrame([{
                "image": i.get("package",""),
                "tag": i.get("tags",[None])[0],
                "update": i.get("updateTime","")
            } for i in imgs]), width='stretch')
        else:
            st.warning("No hay imÃ¡genes o falta AR_DOCKER_PATH.")
    else:
        st.info("DefinÃ­ AR_DOCKER_PATH para listar imÃ¡genes de Artifact Registry.")

# â”€â”€ Uptime & Alertas
elif section == "Uptime & Alertas":
    left, right = st.columns(2)
    with left:
        st.subheader("Uptime Check")
        out, _ = run(f"gcloud monitoring uptime describe {CHECK} --format=json")
        up = safe_json(out) or {}
        ok = (up.get("httpCheck",{}).get("useSsl", False) and True)
        st.write(badge("green" if ok else "red", up.get("displayName","Uptime")))
        st.json(up)

    with right:
        st.subheader("Policies")
        for pid in (P_UP1, P_UP2):
            out, _ = run(f"gcloud alpha monitoring policies describe {pid} --format=json")
            pol = safe_json(out) or {}
            st.write(f"**{pol.get('displayName','(policy)')}** â€” {badge('green' if pol.get('enabled') else 'red')}")
            st.code(json.dumps(pol.get("conditions",[]), indent=2))

    st.subheader("Alertas abiertas (solo uptime)")
    out, _ = run("gcloud alpha monitoring alerts list --format=json")
    alerts = safe_json(out) or []
    aa = []
    for a in alerts:
        pn = a.get("policy_name","")
        if pn in ("CRun | HealthMonitor | Uptime / down","CRun | HealthMonitor | Uptime / all regions down"):
            aa.append({
                "policy": pn,
                "state": a.get("state",""),
                "started": a.get("started_at","-"),
                "ended": a.get("ended_at","-"),
                "name": a.get("name","")
            })
    st.dataframe(pd.DataFrame(aa), width='stretch')

# â”€â”€ Cerebro
elif section == "Cerebro":
    st.subheader("REGISTRY & Strict Mode")
    reg_ok = os.path.exists("knowledge/registry/REGISTRY.md")
    strict_ok = os.path.exists("knowledge/registry/STRICT.yaml")
    st.write("REGISTRY.md:", badge("green" if reg_ok else "red"))
    st.write("STRICT.yaml:", badge("green" if strict_ok else "red"))

    st.subheader("Scan duplicados / Strict check")
    dup_out, _ = run("python3 scripts/dup_scan.py", timeout=60)
    st.code(dup_out or "dup_scan no disponible")

    strict_out, _ = run("scripts/natacha_strict_check.sh", timeout=60)
    st.code(strict_out or "strict_check no disponible")

    st.subheader("Audit logs")
    out, _ = run("ls -1t knowledge/registry/audit | head -n 5")
    if out:
        files = [f"knowledge/registry/audit/{x}" for x in out.splitlines()]
        st.write(files)
        pick = st.selectbox("Ver audit", files)
        if pick and os.path.exists(pick):
            st.code(open(pick).read())
    else:
        st.info("No hay audit logs.")

# â”€â”€ APIs/Config
elif section == "APIs/Config":
    st.subheader("Endpoints & Env")
    out, _ = run(f"gcloud run services describe {SERVICE} --region {REGION} --format=json")
    svc = safe_json(out) or {}
    url = svc.get("status",{}).get("url","")
    st.write("URL:", url or "-")

    containers = (svc.get("spec",{}).get("template",{}).get("spec",{}).get("containers",[]) or [])
    envs = {}
    if containers and containers[0].get("env"):
        envs = {e.get("name"): e.get("value","") for e in containers[0]["env"]}
    st.json(envs or {"info":"No env vars visibles en describe"})

    st.subheader("Health checks rÃ¡pidos")
    if url:
        import urllib.request
        tests = [("/", "OK"), ("/run_auto_infra_check", "AutoCheck")]
        rows = []
        for path, label in tests:
            try:
                with urllib.request.urlopen(url + path, timeout=10) as r:
                    rows.append({"endpoint": path, "label": label, "status": r.status})
            except Exception as e:
                rows.append({"endpoint": path, "label": label, "status": f"ERR: {e}"})
        st.dataframe(pd.DataFrame(rows), width='stretch')
    else:
        st.info("No se detectÃ³ URL del servicio.")

# â”€â”€ AuditorÃ­as
elif section == "AuditorÃ­as":
    st.subheader("Acciones rÃ¡pidas")
    colA, colB, colC = st.columns(3)

    if colA.button("Correr audit_log.sh"):
        out, err = run("scripts/audit_log.sh")
        st.code(out or err)

    if colB.button("Forzar 404 (3.5 min)"):
        cmd = f"gcloud monitoring uptime update {CHECK} --path='/no-existe-llvc' --port=443"
        out, err = run(cmd)
        st.code(out or err)

    if colC.button("Restaurar /"):
        cmd = f"gcloud monitoring uptime update {CHECK} --path='/' --port=443"
        out, err = run(cmd)
        st.code(out or err)

    st.caption("Tip: el semÃ¡foro de Uptime & Alertas refleja las policies que ya configuraste.")
