try:
    from .infra_local_history import save_entry, get_history
except Exception:
    from infra_local_history import save_entry, get_history

try:
    from .infra_cloud_history import save_cloud_entry, get_cloud_history
except Exception:
    from infra_cloud_history import save_cloud_entry, get_cloud_history

try:
    from .auto_healer import run_auto_heal
except Exception:
    from auto_healer import run_auto_heal

try:
    from .infra_sync import sync_firestore
except Exception:
    from infra_sync import sync_firestore

import subprocess
from datetime import datetime, timezone
from google.cloud import firestore


def utc_now_str():
    """Devuelve timestamp UTC con zona horaria (ISO-like, segundos)."""
    return datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S%z")


def get_firestore_client():
    """Obtiene un cliente de Firestore con autenticaci√≥n autom√°tica."""
    return firestore.Client()


def restart_service(service_name):
    """Reinicia un servicio Cloud Run moviendo el tr√°fico a la √∫ltima revisi√≥n."""
    try:
        subprocess.run(
            [
                "gcloud", "run", "services", "update-traffic",
                service_name, "--to-latest",
                "--platform", "managed",
                "--region", "us-central1",
                "--project", "asistente-sebastian"
            ],
            check=True,
            capture_output=True,
            text=True
        )
        print(f"üîÅ Servicio {service_name} reiniciado correctamente.")
        return {"service": service_name, "status": "restarted"}
    except subprocess.CalledProcessError as e:
        print(f"‚ö†Ô∏è Error al reiniciar {service_name}: {e.stderr}")
        return {"service": service_name, "status": "error", "detail": e.stderr}
    except Exception as e:
        print(f"‚ö†Ô∏è Error inesperado al reiniciar {service_name}: {e}")
        return {"service": service_name, "status": "exception", "detail": str(e)}


def log_to_firestore(entry):
    """Guarda un registro del evento de auto-healing en Firestore."""
    try:
        db = get_firestore_client()
        # Asegurar timestamp UTC aware
        ts = utc_now_str()
        entry = {
            **entry,
            "timestamp": ts,
            "ts_server": firestore.SERVER_TIMESTAMP,  # √∫til para queries por hora servidor
        }
        # DocID legible y estable
        doc_id = f"{entry.get('service', 'unknown')}_{ts.replace(' ', '_').replace(':', '-')}"
        db.collection("auto_heal_log").document(doc_id).set(entry)
        print(f"üß† Evento registrado en Firestore: {doc_id}")
    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo registrar el evento en Firestore: {e}")


def auto_heal():
    """
    Escanea los servicios Cloud Run y reinicia los que est√©n en error.
    Tambi√©n guarda los resultados del proceso en Firestore.
    """
    print("üöÄ Ejecutando Auto-Healer Natacha...")
    summary = {
        "timestamp": utc_now_str(),
        "checked": 0,
        "restarted": [],
        "healthy": [],
        "errors": []
    }

    try:
        services = get_cloud_run_services()
        for s in services:
            name = s.get("name")
            status = (s.get("status", "") or "").lower()
            summary["checked"] += 1

            if any(word in status for word in ["error", "failed", "crash", "timeout"]):
                print(f"üö® Servicio en estado an√≥malo: {name} ({status})")
                result = restart_service(name)
                summary["restarted"].append(name)
                log_to_firestore({
                    "service": name,
                    "action": "restart",
                    "status": result["status"],
                    "detail": result.get("detail", ""),
                })
            else:
                print(f"‚úÖ Servicio saludable: {name} ({status})")
                summary["healthy"].append(name)

        # Registrar resumen final en Firestore
        try:
            db = get_firestore_client()
            db.collection("auto_heal_summary").add({
                **summary,
                "ts_server": firestore.SERVER_TIMESTAMP
            })
        except Exception as e:
            print(f"‚ö†Ô∏è No se pudo registrar el resumen en Firestore: {e}")

        print(f"üìã Resumen final registrado: {summary}")

    except Exception as e:
        print(f"‚ùå Error general en Auto-Healer: {e}")
        summary["errors"].append(str(e))
        try:
            db = get_firestore_client()
            db.collection("auto_heal_summary").add({
                **summary,
                "ts_server": firestore.SERVER_TIMESTAMP
            })
        except Exception:
            pass

    return summary


if __name__ == "__main__":
    result = auto_heal()
    print("‚úÖ Auto-Healer ejecutado manualmente:")
    print(result)
