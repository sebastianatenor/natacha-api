try:
    from .infra_local_history import save_entry, get_history
except Exception:
    from infra_local_history import save_entry, get_history

try:
    from .infra_cloud_history import save_cloud_entry, get_cloud_history
except Exception:
    from infra_cloud_history import save_cloud_entry, get_cloud_history

try:
    from .auto_healer import run_auto_heal
except Exception:
    from auto_healer import run_auto_heal

try:
    from .infra_sync import sync_firestore
except Exception:
    from infra_sync import sync_firestore

import os
import json
from datetime import datetime
from google.cloud import firestore

# ðŸ”¹ Importamos funciones del historial local
    HISTORY_FILE,
    get_history,
    clear_history
)

def get_firestore_client():
    """Intenta obtener una instancia del cliente Firestore."""
    key_path = "/app/firestore-key.json"
    if not os.path.exists(key_path):
        key_path = os.environ.get("GOOGLE_APPLICATION_CREDENTIALS")

    if not key_path or not os.path.exists(key_path):
        raise FileNotFoundError("Firestore credentials not found")

    os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = key_path
    return firestore.Client()


def push_to_firestore(entry: dict):
    """Sube una entrada Ãºnica a Firestore."""
    client = get_firestore_client()
    doc_id = datetime.utcnow().strftime("%Y%m%d%H%M%S")
    client.collection("infra_history").document(doc_id).set(entry)
    return doc_id


def sync_local_to_firestore():
    """
    Sincroniza el historial local con Firestore:
    - Si hay diagnÃ³sticos locales pendientes, los sube.
    - Si la subida es exitosa, limpia el archivo local.
    """
    try:
        data = get_history()
        if not data:
            return {"status": "ok", "message": "No hay registros locales pendientes"}

        client = get_firestore_client()
        synced = 0

        for entry in data:
            client.collection("infra_history").add(entry)
            synced += 1

        clear_history()
        return {"status": "ok", "synced": synced, "detail": "SincronizaciÃ³n completa"}

    except Exception as e:
        return {"status": "error", "detail": str(e)}


def pull_from_firestore(limit: int = 20):
    """Obtiene los Ãºltimos registros de Firestore."""
    try:
        client = get_firestore_client()
        docs = (
            client.collection("infra_history")
            .order_by("timestamp", direction=firestore.Query.DESCENDING)
            .limit(limit)
            .stream()
        )
        return [doc.to_dict() for doc in docs]
    except Exception as e:
        return {"status": "error", "detail": str(e)}
