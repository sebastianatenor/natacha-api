from fastapi import FastAPI
# --- imports locales con fallback ---
try:
    from .infra_local_history import save_entry, get_history, clear_history
except Exception:
    from infra_local_history import save_entry, get_history, clear_history

try:
    from .infra_sync import sync_local_to_firestore, pull_from_firestore
except Exception:
    try:
        from infra_sync import sync_local_to_firestore, pull_from_firestore
    except Exception:
        # fallback a nombres alternativos si tu m√≥dulo usa otras firmas
        try:
            from .infra_sync import sync_firestore as sync_local_to_firestore
        except Exception:
            from infra_sync import sync_firestore as sync_local_to_firestore
        # si no hay pull_from_firestore en tu m√≥dulo, creamos un thin wrapper que devuelve OK
        def pull_from_firestore():
            return {"status": "ok", "message": "pull_from_firestore no implementado en infra_sync"}
# --- fin imports locales ---
try:
    from .infra_local_history import save_entry, get_history
except Exception:
    from infra_local_history import save_entry, get_history

try:
    from .infra_cloud_history import save_cloud_entry, get_cloud_history
except Exception:
    from infra_cloud_history import save_cloud_entry, get_cloud_history

try:
    from .auto_healer import run_auto_heal
except Exception:
    from auto_healer import run_auto_heal

try:
    from .infra_sync import sync_firestore
except Exception:
    from infra_sync import sync_firestore

from fastapi.responses import JSONResponse
import os
import json
from datetime import datetime, timezone

# üîπ M√≥dulos internos

# ‚òÅÔ∏è Firestore
from google.cloud import firestore

app = FastAPI(title="Natacha Health Monitor")

def utc_now_str():
    return datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S%z")

# =====================================================
# ü©∫ ENDPOINT PRINCIPAL
# =====================================================
@app.get("/")
def root():
    return {"status": "ok", "message": "natacha-health-monitor activo"}

# =====================================================
# üõ†Ô∏è AUTO-HEALER POR HTTP (nuevo)
# =====================================================
@app.post("/auto_heal")
def run_auto_heal():
    """
    Ejecuta escaneo + autocuraci√≥n de servicios Cloud Run.
    Devuelve el resumen y lo registra en Firestore.
    """
    try:
        summary = auto_heal()
        # Guarda un snapshot del resumen (con TS de servidor)
        try:
            db = firestore.Client()
            db.collection("auto_heal_runs").add({
                **summary,
                "ts_server": firestore.SERVER_TIMESTAMP
            })
        except Exception as e:
            print("‚ö†Ô∏è No se pudo guardar auto_heal_runs en Firestore:", str(e))
        return {"status": "ok", "data": summary}
    except Exception as e:
        return JSONResponse(status_code=500, content={"status": "error", "detail": str(e)})

# =====================================================
# üöÄ EJECUCI√ìN DE DIAGN√ìSTICO AUTOM√ÅTICO
# =====================================================
@app.post("/run_auto_infra_check")
def run_auto_infra_check():
    """
    Ejecuta un diagn√≥stico autom√°tico de infraestructura.
    Guarda el resultado tanto localmente como en Firestore (si est√° disponible).
    Tambi√©n incluye un escaneo real de servicios Cloud Run.
    """
    try:
        # üîπ Recolectar servicios activos
        cloud_services = []
        try:
            cloud_services = get_cloud_run_services()
        except Exception as ce:
            print("‚ö†Ô∏è No se pudieron obtener servicios Cloud Run:", str(ce))

        result = {
            "timestamp": utc_now_str(),
            "environment": "cloudrun" if os.environ.get("K_SERVICE") else "local",
            "project": os.environ.get("GCP_PROJECT", "N/A"),
            "account": os.environ.get("GOOGLE_ACCOUNT", "N/A"),
            "vm_status": [],
            "docker_containers": [],
            "cloud_run_services": cloud_services,
            "disk_usage": "1%"
        }

        # üîπ Guardar el diagn√≥stico localmente
        save_entry(result)

        # üîπ Intentar guardar en Firestore
        try:
            save_to_firestore(result)
        except Exception as fe:
            print("‚ö†Ô∏è No se pudo guardar en Firestore:", str(fe))

        # üîπ Intentar autocuraci√≥n
        try:
            auto_heal()
        except Exception as ae:
            print("‚ö†Ô∏è Error en auto-heal:", str(ae))

        return {"status": "ok", "detail": "Diagn√≥stico ejecutado correctamente", "data": result}

    except Exception as e:
        return JSONResponse(status_code=500, content={"status": "error","detail": str(e)})

# =====================================================
# ‚òÅÔ∏è GUARDADO EN FIRESTORE
# =====================================================
def save_to_firestore(data):
    """Guarda resultados del diagn√≥stico en Firestore (ADC/Workload Identity)."""
    try:
        db = firestore.Client()
        doc_ref = db.collection("infra_history").document(data["timestamp"])
        doc_ref.set(data)
        print(f"‚úÖ Datos guardados en Firestore: {data['timestamp']}")
    except Exception as e:
        print(f"‚ö†Ô∏è Error al guardar en Firestore: {e}")

# =====================================================
# üìú HISTORIAL LOCAL
# =====================================================
@app.get("/infra_history")
def infra_history():
    """Devuelve el historial local de diagn√≥sticos."""
    try:
        data = get_history()
        return {"status": "ok", "count": len(data), "data": data}
    except Exception as e:
        return {"status": "error", "detail": str(e)}

@app.delete("/infra_clear")
def infra_clear():
    """Limpia el historial local de infraestructura."""
    try:
        clear_history()
        return {"status": "ok", "message": "Historial local eliminado correctamente"}
    except Exception as e:
        return {"status": "error", "detail": str(e)}

# =====================================================
# üîÅ SINCRONIZACI√ìN MANUAL CON FIRESTORE
# =====================================================
@app.post("/sync_firestore")
def sync_firestore():
    """Sincroniza el historial local con Firestore."""
    result = sync_local_to_firestore()
    return result

@app.get("/infra_history_cloud")
def infra_history_cloud():
    """Obtiene el historial directamente desde Firestore."""
    result = pull_from_firestore()
    return result

# =====================================================
# ‚öôÔ∏è INICIO AUTOM√ÅTICO DE PROCESOS EN BACKGROUND
# =====================================================
@app.on_event("startup")
def startup_event():
    """Se ejecuta cuando el servicio inicia (ideal para Cloud Run o local)."""
    print("üöÄ Iniciando Natacha Health Monitor...")
    try:
        start_scheduler()  # üîÅ Comienza el ciclo de diagn√≥sticos autom√°ticos
        print("‚úÖ AutoScheduler iniciado correctamente.")
    except Exception as e:
        print("‚ö†Ô∏è No se pudo iniciar el AutoScheduler:", str(e))

# =====================================================
# üß™ EJECUCI√ìN LOCAL
# =====================================================
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("health_monitor.app:app", host="0.0.0.0", port=8085, reload=True)
# --- std health endpoint (no side effects) ---
try:
    app  # ensure 'app' exists
    @app.get("/health", include_in_schema=False)
    def health():
        return {"status": "ok"}
except NameError:
    # If 'app' isn't available in this module, don't break imports
    pass
