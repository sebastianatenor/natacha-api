import platform
import getpass
import psutil
import streamlit as st
from datetime import datetime

def get_os_info():
    return {
        "Sistema": platform.system(),
        "Versi√≥n": platform.platform(),
        "Release": platform.release(),
        "Arquitectura": platform.machine(),
        "Procesador": platform.processor() or "N/A",
        "Python": platform.python_version(),
        "Usuario": getpass.getuser(),
    }

def get_cpu_mem():
    return {
        "cpu_percent": psutil.cpu_percent(interval=0.5),
        "mem": psutil.virtual_memory()._asdict(),
        "disk": psutil.disk_usage("/")._asdict(),
    }

def get_top_processes(limit=8):
    rows = []
    for p in psutil.process_iter(["pid", "name", "username", "cpu_percent", "memory_percent"]):
        rows.append(p.info)
    rows = sorted(rows, key=lambda x: x.get("cpu_percent", 0), reverse=True)
    return rows[:limit]

def show():
    st.subheader("üì¶ Informaci√≥n del sistema operativo")

    os_info = get_os_info()
    cm = get_cpu_mem()

    col1, col2, col3 = st.columns(3)
    col1.metric("üñ•Ô∏è Sistema", os_info.get("Sistema", "-"))
    col2.metric("üë§ Usuario", os_info.get("Usuario", "-"))
    col3.metric("üêç Python", os_info.get("Python", "-"))

    # CPU / MEM / DISK
    cpu = cm["cpu_percent"]
    mem = cm["mem"]
    disk = cm["disk"]

    c1, c2, c3 = st.columns(3)
    c1.metric("CPU %", f"{cpu:.1f}%")
    c2.metric("RAM usada", f"{mem['percent']}%")
    c3.metric("Disco usado", f"{disk['percent']}%")

    with st.expander("üìã Detalle del sistema"):
        st.table({
            "Sistema": os_info.get("Sistema"),
            "Release": os_info.get("Release"),
            "Arquitectura": os_info.get("Arquitectura"),
            "Procesador": os_info.get("Procesador"),
        })

    st.markdown("### üîé Procesos con m√°s uso de CPU")
    procs = get_top_processes()
    if procs:
        import pandas as pd
        df = pd.DataFrame(procs)
        st.dataframe(df, use_container_width=True)
    else:
        st.info("No se pudieron leer los procesos.")

    st.caption(f"üïí Actualizado: {datetime.utcnow().isoformat()}Z")
