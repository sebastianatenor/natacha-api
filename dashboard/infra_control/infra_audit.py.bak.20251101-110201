import os
import json
import streamlit as st
import pandas as pd

AUDIT_DIR = "knowledge/registry/audit"
DOCKER_DIR = "logs"

def _list_audit_files():
    files = []
    # auditor√≠as json
    if os.path.isdir(AUDIT_DIR):
        for f in os.listdir(AUDIT_DIR):
            if f.endswith(".json"):
                path = os.path.join(AUDIT_DIR, f)
                files.append({
                    "file": f,
                    "path": path,
                    "type": "json",
                    "size": os.path.getsize(path),
                })
    # dumps de docker
    if os.path.isdir(DOCKER_DIR):
        for f in os.listdir(DOCKER_DIR):
            if f.startswith("docker_") and (f.endswith(".txt") or f.endswith(".log")):
                path = os.path.join(DOCKER_DIR, f)
                files.append({
                    "file": f,
                    "path": path,
                    "type": "docker",
                    "size": os.path.getsize(path),
                })
    # ordenamos por fecha en el nombre (desc)
    files.sort(key=lambda x: x["file"], reverse=True)
    return files

def _load_file(item: dict):
    path = item["path"]
    if item["type"] == "json":
        with open(path, "r") as f:
            return json.load(f)
    else:
        with open(path, "r") as f:
            return {"raw": f.read()}

def show():
    st.subheader("üß© Auditor√≠a Global de Infraestructura")
    st.caption("√öltimas corridas de auditor√≠a sobre REGISTRY / servicios / duplicados")

    files = _list_audit_files()
    if not files:
        st.info("No se encontraron auditor√≠as en disco.")
        return

    # listado resumido
    df = pd.DataFrame([{
        "Archivo": f["file"],
        "Tipo": f["type"],
        "Tama√±o": f["size"]
    } for f in files])
    st.dataframe(df, use_container_width=True)

    # selector
    pick_names = [f["file"] for f in files]
    picked = st.selectbox("Ver detalle de una auditor√≠a", pick_names, index=0)
    current = next((f for f in files if f["file"] == picked), None)

    if not current:
        return

    data = _load_file(current)

    st.markdown("#### Detalle")
    # 1) si es json "bien formado", mostrar claves importantes arriba
    if current["type"] == "json" and isinstance(data, dict):
        main_keys = ["timestamp", "summary", "service", "result", "duplicates", "alerts"]
        cols = st.columns(len(main_keys))
        for i, k in enumerate(main_keys):
            val = data.get(k)
            if val is None:
                continue
            # mostramos valores "amigables"
            if isinstance(val, (list, dict)):
                cols[i].metric(k, f"{len(val)} item(s)")
            else:
                cols[i].metric(k, str(val))

        # mostrar el json completo en un expander
        with st.expander("üìÑ Ver JSON completo"):
            st.json(data)
    else:
        st.info("Auditor√≠a de tipo texto (docker / logs).")

    # 2) si viene campo raw, lo mostramos aparte y colapsado
    raw_text = data.get("raw") if isinstance(data, dict) else None
    if raw_text:
        with st.expander("üìù Salida completa del comando (raw)"):
            st.code(raw_text)
